import numpy as npimport soundfile as sffrom function import *class ECHO():    def __init__(self):        self.atten = 0.6        self.FRAG = 1024        self.D = [8, 12]    def hide(self, src, dst, msg, fb = 0, sa = 0):#sa：衰减系数自适应        bits = str2bit(msg)        self.bits = bits        s, fs = sf.read(src)        d_len = len(self.D)        s_len = len(s)        cap = int(np.log2(d_len))        t_len = len(bits) * self.FRAG // cap        if t_len > s_len:            s = np.tile(s, t_len // s_len)            s = np.append(s, s[:t_len % s_len])        else:            s = s[:t_len]        se = np.tile(np.zeros(t_len), [d_len, 1])        for i in range(d_len):            se[i] = np.append(np.zeros(self.D[i]), s[:-self.D[i]])            if fb == 1:                se[i] += np.append(s[self.D[i]:], np.zeros(self.D[i]))        o = np.zeros(t_len)        for i in range(len(bits) // cap):            num = int(bits[i * cap:(i + 1) * cap], 2)            st, ed = i * self.FRAG, (i + 1) * self.FRAG            p1 = se[num][st:ed]            p2 = s[st:ed]            if sa == 0:                o[st:ed] = p1 * self.atten + p2            else:                for j in range(10):                    p12 = p1 * (j * 0.1) + p2                    if int(myCeps(p12, self.FRAG, self.D)) == num:                        break                o[st:ed] = p12        sf.write(dst, o, fs)    def dehide(self, src):        y, fs = sf.read(src)        o = ''.join([myCeps(y[i * self.FRAG:(i + 1) * self.FRAG], self.FRAG, self.D) for i in range(len(y) // self.FRAG)])        o = ''.join([chr(int(o[i * 8:(i + 1) * 8], 2)) for i in range(len(o) // 8)])        return oif __name__ == '__main__':    message = 'abcdefghijklmnopqrstuvwxyz0123456789'    echo = ECHO()    echo.hide('source.wav', 'hide.wav', message, 0, 1)    message_rec = echo.dehide('hide.wav')    print('error:', error(str2bit(message), str2bit(message_rec)))    print('psnr:', psnr('source.wav', 'hide.wav'))